import { Features } from "@/components/blocks/features-11"
import HeroAgent from "@/components/blocks/heroAgentPHR"
import Navbar from "@/components/ui/nav"
import { Footerdemo } from "@/demo/fs"
import { GradientHeadingDemo } from "@/demo/gradientHeadDemo"
import { Bolt, CopyPlus, Layers2, Files, Users, Briefcase, Clock, DollarSign, Percent, Award, BarChart3, LineChart, Upload, ArrowUp, ArrowDown, FileText, Trash2, FileCheck, PieChart, CheckCircle, AlertCircle, ChevronRight, MoreHorizontal, Search, Filter, Download, RefreshCw, Settings, Plus, ExternalLink, Activity, Zap, UserCheck, Target, TrendingUp, Calendar, BarChart, ChevronDown, FileSpreadsheet, FileBarChart, UserPlus, Sparkles, Cpu, Brain, Database } from 'lucide-react'
import { useState, useRef, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Skeleton } from "@/components/ui/skeleton"
import { useToast } from "@/components/ui/use-toast"
import { ToastAction } from "@/components/ui/toast"
import axios from 'axios'

// Dashboard data interfaces
interface Trend {
  value: number;
  trend: number;
}

interface RecruitmentMetrics {
  total_applications: number;
  hires_this_month: number;
  time_to_hire: number;
  cost_per_hire: number;
  offer_accept_rate: number;
  quality_score: number;
  trends: {
    applications: number[];
    hires: number[];
    time_to_hire: number[];
  };
}

interface Candidate {
  id: number;
  name: string;
  role: string;
  match: number;
  skills: number;
  experience: number;
  education: number;
  contact: string;
  level: string;
  strengths: string[];
  weaknesses: string[];
  applied_date: string;
}

interface SourceData {
  name: string;
  value: number;
}

interface SkillData {
  name: string;
  value: number;
}

interface JobAnalytics {
  open_positions: number;
  avg_applications_per_job: number;
  top_sources: SourceData[];
  application_trends: number[];
  skill_demand: SkillData[];
}

interface ResumeAnalysis {
  overall_score: number;
  skills_match: number;
  experience_relevance: number;
  education_fit: number;
  communication_skills: number;
  technical_proficiency: number;
  leadership_potential: number;
  cultural_fit: number;
}

interface DashboardData {
  recruitment_metrics: RecruitmentMetrics;
  candidate_matches: Candidate[];
  job_analytics: JobAnalytics;
  resume_analysis: ResumeAnalysis;
}

interface ResumeUpload {
  name: string;
  size: number;
  type: string;
}

interface JobInsights {
  job_id: number;
  title: string;
  applications: number;
  qualified_candidates: number;
  time_open: number;
  candidate_demographics: {
    experience_levels: {
      entry: number;
      mid: number;
      senior: number;
    };
    education: {
      bachelor: number;
      master: number;
      phd: number;
      other: number;
    };
  };
  skill_distribution: {
    name: string;
    candidates_with_skill: number;
  }[];
}

interface JobDescription {
  title: string;
  department: string;
  location: string;
  experience: string;
  skills: string[];
  responsibilities: string[];
}

export const OptimusPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Dashboard state
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [activeTab, setActiveTab] = useState<string>("overview");
  const [timeRange, setTimeRange] = useState<string>("7d");
  const [jobDescriptionText, setJobDescriptionText] = useState<string>("");
  const [uploadedResumes, setUploadedResumes] = useState<ResumeUpload[]>([]);
  const [analyzing, setAnalyzing] = useState<boolean>(false);
  const [analysisResult, setAnalysisResult] = useState<ResumeAnalysis | null>(null);
  const [selectedJob, setSelectedJob] = useState<number | null>(null);
  const [jobInsights, setJobInsights] = useState<JobInsights | null>(null);
  const [jobInsightsLoading, setJobInsightsLoading] = useState<boolean>(false);
  
  // Fetch dashboard data
  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/v1/optimus/dashboard');
        setDashboardData(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
        toast({
          title: "Error fetching dashboard data",
          description: "Could not load dashboard data. Please try again later.",
          variant: "destructive"
        });
        setLoading(false);
        
        // For demo purposes, set mock data if API fails
        setDashboardData({
          recruitment_metrics: {
            total_applications: 3247,
            hires_this_month: 28,
            time_to_hire: 38,
            cost_per_hire: 4.2,
            offer_accept_rate: 89,
            quality_score: 8.4,
            trends: {
              applications: [180, 220, 250, 270, 290, 310, 330],
              hires: [3, 4, 5, 6, 5, 4, 5],
              time_to_hire: [40, 39, 38, 38, 37, 37, 38]
            }
          },
          candidate_matches: [
            { id: 1, name: "Alex Johnson", role: "Frontend Developer", match: 95, skills: 92, experience: 88, education: 90, contact: "alex@example.com", level: "Senior", strengths: ["React", "TypeScript", "UI/UX"], weaknesses: ["Backend"], applied_date: new Date().toISOString() },
            { id: 2, name: "Samantha Lee", role: "Full Stack Engineer", match: 87, skills: 85, experience: 90, education: 88, contact: "sam@example.com", level: "Mid-level", strengths: ["Node.js", "React", "MongoDB"], weaknesses: ["DevOps"], applied_date: new Date().toISOString() },
            { id: 3, name: "Michael Chen", role: "DevOps Engineer", match: 82, skills: 84, experience: 80, education: 85, contact: "michael@example.com", level: "Senior", strengths: ["AWS", "Docker", "CI/CD"], weaknesses: ["Frontend"], applied_date: new Date().toISOString() },
            { id: 4, name: "Priya Patel", role: "UX Designer", match: 78, skills: 80, experience: 75, education: 82, contact: "priya@example.com", level: "Mid-level", strengths: ["Figma", "User Research"], weaknesses: ["Coding"], applied_date: new Date().toISOString() },
            { id: 5, name: "David Wilson", role: "Product Manager", match: 72, skills: 70, experience: 78, education: 75, contact: "david@example.com", level: "Senior", strengths: ["Strategy", "Leadership"], weaknesses: ["Technical"], applied_date: new Date().toISOString() }
          ],
          job_analytics: {
            open_positions: 12,
            avg_applications_per_job: 68,
            top_sources: [
              { name: "LinkedIn", value: 42 },
              { name: "Indeed", value: 28 },
              { name: "Referrals", value: 15 },
              { name: "Company Website", value: 10 },
              { name: "Other", value: 5 }
            ],
            application_trends: Array(30).fill(0).map(() => Math.floor(Math.random() * 80) + 20),
            skill_demand: [
              { name: "JavaScript", value: 85 },
              { name: "React", value: 80 },
              { name: "Python", value: 75 },
              { name: "AWS", value: 70 },
              { name: "SQL", value: 65 }
            ]
          },
          resume_analysis: {
            overall_score: 85,
            skills_match: 82,
            experience_relevance: 88,
            education_fit: 90,
            communication_skills: 78,
            technical_proficiency: 86,
            leadership_potential: 75,
            cultural_fit: 89
          }
        });
      }
    };
    
    fetchDashboardData();
  }, [toast]);
  
  // Handle file upload for resumes
  const handleResumeUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const newResumes = Array.from(files).map(file => ({
        name: file.name,
        size: file.size,
        type: file.type
      }));
      setUploadedResumes([...uploadedResumes, ...newResumes]);
      
      toast({
        title: "Resumes uploaded",
        description: `${newResumes.length} resume(s) added for analysis.`,
        variant: "default"
      });
    }
  };
  
  // Handle removing a resume from the list
  const handleRemoveResume = (index: number) => {
    const updatedResumes = [...uploadedResumes];
    updatedResumes.splice(index, 1);
    setUploadedResumes(updatedResumes);
  };
  
  // Handle job description input
  const handleJobDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    setJobDescriptionText(event.target.value);
  };
  
  // Start the AI analysis process
  const startAnalysis = async () => {
    if (uploadedResumes.length === 0) {
      toast({
        title: "No resumes uploaded",
        description: "Please upload at least one resume to analyze.",
        variant: "destructive"
      });
      return;
    }
    
    if (!jobDescriptionText.trim()) {
      toast({
        title: "Job description required",
        description: "Please enter a job description to match against the resumes.",
        variant: "destructive"
      });
      return;
    }
    
    setAnalyzing(true);
    
    try {
      // In a real implementation, you would upload the resume files
      // For now, we'll simulate the API call
      const response = await axios.post('/api/v1/optimus/analyze-resume', {
        job_description: jobDescriptionText
      });
      
      setAnalysisResult(response.data.analysis);
      
      toast({
        title: "Analysis complete",
        description: "Resume analysis has been completed successfully.",
        variant: "default"
      });
    } catch (error) {
      console.error('Error analyzing resumes:', error);
      toast({
        title: "Analysis failed",
        description: "Could not complete resume analysis. Please try again.",
        variant: "destructive"
      });
      
      // For demo purposes, set mock analysis result
      setAnalysisResult({
        overall_score: 85,
        skills_match: 82,
        experience_relevance: 88,
        education_fit: 90,
        communication_skills: 78,
        technical_proficiency: 86,
        leadership_potential: 75,
        cultural_fit: 89
      });
    } finally {
      setAnalyzing(false);
    }
  };
  
  // Reset the analysis
  const resetAnalysis = () => {
    setUploadedResumes([]);
    setJobDescriptionText("");
    setAnalysisResult(null);
    setAnalyzing(false);
  };
  
  // Load job insights
  const loadJobInsights = async (jobId: number) => {
    setSelectedJob(jobId);
    setJobInsightsLoading(true);
    
    try {
      const response = await axios.get(`/api/v1/optimus/job-insights/${jobId}`);
      setJobInsights(response.data);
    } catch (error) {
      console.error('Error loading job insights:', error);
      toast({
        title: "Error loading job insights",
        description: "Could not load job insights. Please try again later.",
        variant: "destructive"
      });
      
      // For demo purposes, set mock job insights
      setJobInsights({
        job_id: jobId,
        title: `Job Position ${jobId}`,
        applications: 87,
        qualified_candidates: 32,
        time_open: 28,
        candidate_demographics: {
          experience_levels: {
            entry: 25,
            mid: 45,
            senior: 30
          },
          education: {
            bachelor: 55,
            master: 30,
            phd: 10,
            other: 5
          }
        },
        skill_distribution: [
          { name: "Required Skill 1", candidates_with_skill: 85 },
          { name: "Required Skill 2", candidates_with_skill: 70 },
          { name: "Required Skill 3", candidates_with_skill: 60 },
          { name: "Required Skill 4", candidates_with_skill: 45 },
          { name: "Required Skill 5", candidates_with_skill: 30 }
        ]
      });
    } finally {
      setJobInsightsLoading(false);
    }
  };
  
  // Helper function to render KPI card
  const renderKpiCard = (title: string, value: number | string, trend: number | undefined, icon: React.ReactNode, format: string = 'number') => {
    const formattedValue = format === 'number' ? value : 
                         format === 'percent' ? `${value}%` : 
                         format === 'currency' ? `$${value}` : 
                         format === 'days' ? `${value} days` : value;
    
    return (
      <Card className="overflow-hidden">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
            {icon}
            {title}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{formattedValue}</div>
          {trend !== undefined && (
            <div className="flex items-center mt-1">
              {trend > 0 ? (
                <Badge variant="outline" className="bg-green-50 text-green-700 border-0 flex items-center gap-1">
                  <ArrowUp className="h-3 w-3" />
                  {Math.abs(trend)}%
                </Badge>
              ) : trend < 0 ? (
                <Badge variant="outline" className="bg-red-50 text-red-700 border-0 flex items-center gap-1">
                  <ArrowDown className="h-3 w-3" />
                  {Math.abs(trend)}%
                </Badge>
              ) : (
                <Badge variant="outline" className="bg-gray-50 text-gray-700 border-0">
                  0%
                </Badge>
              )}
              <span className="text-xs text-muted-foreground ml-2">vs. previous period</span>
            </div>
          )}
        </CardContent>
      </Card>
    );
  };
  
  // Helper function to format numbers
  const formatNumber = (num: number): string => {
    return new Intl.NumberFormat('en-US', { maximumFractionDigits: 1 }).format(num);
  };
  
  // Helper function to format dates
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', { month: 'short', day: 'numeric', year: 'numeric' }).format(date);
  };
  
  // Helper function to render a simple chart (placeholder)
  const renderSimpleChart = (data: number[], height: number = 40) => {
    const max = Math.max(...data);
    
    return (
      <div className={`flex items-end h-[${height}px] gap-1 mt-2`}>
        {data.map((value, index) => (
          <div 
            key={index}
            className="bg-primary/20 hover:bg-primary/30 rounded-sm transition-all"
            style={{ 
              height: `${(value / max) * 100}%`, 
              width: `${100 / data.length}%` 
            }}
          />
        ))}
      </div>
    );
  };
  
  // Render loading skeleton
  const renderSkeleton = () => (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {[1, 2, 3, 4].map((i) => (
          <Card key={i} className="overflow-hidden">
            <CardHeader className="pb-2">
              <Skeleton className="h-4 w-24" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-8 w-20 mb-2" />
              <Skeleton className="h-4 w-32" />
            </CardContent>
          </Card>
        ))}
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <Skeleton className="h-5 w-40" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-[200px] w-full" />
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <Skeleton className="h-5 w-40" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-[200px] w-full" />
          </CardContent>
        </Card>
      </div>
    </div>
  );
